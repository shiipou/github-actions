name: Get Version
# description: Determine the version of the project based on the latest commit and generate a changelog using the Rust Convco cli tool.

on:
  workflow_call:
    inputs:
      convco-version:
        type: string
        description: 'Version of Convco to use (default: latest)'
        required: false
        default: 'latest'
      path:
        type: string
        description: 'Only commits that update those <paths> will be taken into account.'
        required: false
      release-branch:
        type: string
        description: 'Name of the release branch'
        required: false
        default: main
      prerelease-branches:
        type: string
        description: 'Prerelease branch names'
        required: false
        default: beta,alpha,rc
      changelog-include-hidden-sections:
        type: boolean
        description: 'Include hidden sections in the changelog'
        required: false
        default: false
      force:
        type: boolean
        description: Force the workflow to generate a version number even if it already exist or didn't match the branches rules.
        required: false
        default: false
    outputs:
      version:
        description: 'The calculated version'
        value: ${{ jobs.get_version.outputs.version }}
      changelog:
        description: 'The changes between calculated version and previous version'
        value: ${{ jobs.get_version.outputs.changelog }}
      channel:
        description: 'The pre-release channel used to produce the version'
        value: ${{ jobs.get_version.outputs.channel }}

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.get_version.outputs.changelog }}
      channel: ${{ steps.get_version.outputs.channel }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup convco
        uses: convco/convco-action@v0.2.0
        
      - name: Determine version using convco CLI
        id: get_version
        run: |
          if [[ -n "${{ inputs.path }}" ]]; then
            echo "Using path: ${{ inputs.path }}"
            path_args="--path ${{ inputs.path }}"
          fi
          IFS="," read -ra prerelease_branches <<< "${{ inputs.prerelease-branches }}"
          IFS="," read -ra release_branches <<< "${{ inputs.release-branch }}"
          current_branch="${{ github.ref_name }}"
          must_release=false
          if [[ " ${prerelease_branches[*]} " =~ " ${current_branch} " ]] ; then
            must_release=true
            prerelease_args="--prerelease ${current_branch}"
            channel=${current_branch}
          elif [[ " ${release_branches[*]} " =~ " ${current_branch} " ]]; then
            must_release=true
          elif ${{ inputs.force }} ; then
            echo "Event not hit release_branch or prerelease_branches, but force is set to True."
            must_release=true
          fi
          
          if ${must_release} ; then
            VERSION=$(convco version -b $prerelease_args)
            echo "Determined version: ${VERSION}"
            tag="$(git tag --list v$VERSION)"
            if ${{ inputs.force }} ; then
              echo "Version already exist, but force is set to True."
              tag=""
            fi
            
            if [ -z "$tag" ] ; then
              if ${{ inputs.changelog-include-hidden-sections }} ; then
                hidden_args="--include-hidden-sections"
              fi
              CHANGELOG=$(convco changelog $hidden_args -u $VERSION)
              echo "version=${VERSION}" >> $GITHUB_OUTPUT
              if [ -n "${channel}" ]; then
                echo "channel=${channel}" >> $GITHUB_OUTPUT
              fi
              echo "changelog<<EOF" >> $GITHUB_OUTPUT
              echo "${CHANGELOG}" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "Will not release: Version already exist"
            fi
          else
            echo "Will not release: Event not hit release_branch or prerelease_branches"
          fi
